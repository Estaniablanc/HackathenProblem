//Given an interference array, divide the array into 2 subsets A and B while respecting the following conditions: 
//The intersection of A and B is null
//The union of A and B is equal to the original array.
//The number of elements is a subset A is minimal.
//The sum of A’s elements is greater than the sum of B’s elements.

//Return the subsets A in increasin order where the sum of A’s elements is greater than the sum of B’s elements. If more than one subset exists, return the one with the maximal sum.

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class InterferenceArrayDivision {
    public static List<Integer> divideArray(int[] arr) {
        List<Integer> subsetA = new ArrayList<>();
        List<Integer> subsetB = new ArrayList<>();
        Arrays.sort(arr);

        for (int i = arr.length - 1; i >= 0; i--) {
            if (subsetA.size() < subsetB.size()) {
                subsetA.add(arr[i]);
            } else {
                subsetB.add(arr[i]);
            }
        }

        Collections.reverse(subsetA);

        int sumA = subsetA.stream().mapToInt(Integer::intValue).sum();
        int sumB = subsetB.stream().mapToInt(Integer::intValue).sum();

        if (sumA <= sumB) {
            return Collections.emptyList();
        }

        return subsetA;
    }

    public static void main(String[] args) {
        int[] arr = {5, 2, 8, 1, 4, 6};
        List<Integer> result = divideArray(arr);
        if (result.isEmpty()) {
            System.out.println("No valid division found.");
        } else {
            System.out.println("Subset A: " + result);
        }
    }
}
